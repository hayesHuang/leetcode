package leetcode;

public class ConstructBinaryTreefromInorderandPostorderTraversal {
	private int leftLength(int root,int[] inorder,int inStart,int inEnd){
		int index=inStart;
		while(inorder[index]!=root){
			index++;
		}
		return index-inStart;
	}
	private TreeNode buildTree(int[] inorder,int inStart,int inEnd,int[] postorder, int postStart,int postEnd){
		if(postStart>postEnd){
			return null;
		}
		TreeNode root = new TreeNode(postorder[postEnd]);
		if(postStart==postEnd){
			root.left=null;
			root.right=null;
		}else{
			int lLength =leftLength(postorder[postEnd],inorder,inStart,inEnd);
			root.left=buildTree(inorder,inStart,inStart+lLength-1,postorder,postStart,postStart+lLength-1);
			root.right=buildTree(inorder,inStart+lLength+1,inEnd,postorder,postStart+lLength+1,postEnd);
		}
		return root;
	}
    public TreeNode buildTree(int[] inorder,int[] postorder) {
        return buildTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
